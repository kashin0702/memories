js的数据类型:
5种数据类型：string,number,boolean,function,object

3种对象类型：object,date,array,


内置对象window (window包含了document,history,location,screen,navigator五大对象)
常用属性：
window.innerHeight      //浏览器窗口高度
window.innerWidth       //浏览器窗口宽度
window.pageXoffset      //设置或返回当前页面相对于窗口显示区左上角的X位置
window.pageYoffset      //设置或返回当前页面相对于窗口显示区左上角的Y位置
window.screenX          //相对于屏幕窗口的X坐标   
window.screenY          //相对于屏幕窗口的Y坐标                    
window.location         //当前URL(是一个对象)  可以不加window前缀
location.hash           url#后面的地址,含#
location.host           服务器名和端口号
location.href           当前页面的完整url(可以修改)
location.pathname       url的目录和文件名
location.search         url ?后的地址，含?

window.history          //当前浏览器游览的历史信息
history.length          //history对象中有多少项,可以不加window前缀

window.screen           //指向screen对象
screen.width            //访问screen对象，并找到设备宽度,可以不加window前缀
screen.height           //设备高度,可以不加window前缀

方法：  均可不带window前缀使用
window.alert()  弹窗 只有一个关闭按钮
window.confirm() 确认/取消窗口，2个按钮  返回ture/false
window.prompt() 带输入框弹窗    
window.print()  打印
window.open()  新窗口打开参数中指定的url
window.close()
window.moveTo(x,y)              窗口移动到指定位置
window.resizeTo(width,height)   调整窗口至指定大小
window.scrollBy()       按照指定的像素值来滚动内容
window.scrollTo()       把内容滚动到指定的坐标
setTimeOut()
clearTimeOut()


history方法:
history.back()          加载列表前一个url
history.forward()       加载列表后一个url
history.go()            加载指定url


内置对象document
属性：
document.title                  当前文档标题
document.lastModified           最后一次修改时间
document.URL                    返回包含当前文档URL的字符串(只能读取，不能修改)
document.domain                 返回当前文档的域 
方法：                       
document.write()                向当前文档写入内容
document.getElmentById()        返回与ID属性值匹配的元素
document.querySelectAll()       返回一组元素，这些元素都符合参数中定义的CSS选择器
document.createElment()         创建新元素
document.createTextNode()       创建新的文本节点

navigator对象
属性：
appCodeName             浏览器代码名
appMinorVersion         浏览器次级版本
appName                 浏览器名称
appVersion              浏览器版本
browserLanguage         浏览器当前语言
platform                运行浏览器的操作系统
userAgent               userAgent头部的值
userLanguage            os的自然语言设置


全局方法,其实都是global对象的方法，无法访问该对象，global对象是js的一个兜底对象
window对象，可以理解成global是window对象的一部分，因此全局作用域声明的所有函数和变量，都成为了window对象的属性

这些都是全局方法:
typeof              返回对象的数据类型
isNaN()             判断是否数字，返回布尔值
Number()
String()
eval()              计算js字符串，并把他作为脚本执行
parseInt()
parseFloat()
decodeURI()              解码一个编码的uri
decodeURIComponent()     解码一个编码的uri组件
encodeURI()              把字符串编码为uri      只编码uri中的空格，所以适用于没有查询字符串的URL，用得少
encodeURIComponent()     把字符串编码为uri组件  编码所有的非字母数字字符，所以适用于URL后面的查询字符串，用的多
                         对于查询字符串，必须用这个方法 
                         该方法用于将URL作为参数传递的场景

字符串返回数值： （全局方法）
parseFloat()    字符串转换浮点型用，比如含小数点的，判断字符串首字符是否是数字，是数字的话以浮点型返回该数字，字母符合等不会返回，只返回数字
例：
parseFloat('40 years') //40
parseFloat('he is 40') //NaN
parseFloat('123.45.67')//123.45

parseInt()      字符串转换整型，返回一个十进制整数或NaN，首字符不能解析就会返回NaN
parseInt("123.45")  //123


全局对象
------------------------------------------------------
字符串对象string   //所有字符串都能使用该对象的方法
属性：
length  返回字符串中的字符数   数组有多少项
方法：
toUpperCase()   将字符串修改为大写
toLowerCase()   将字符串修改为小写
charAt()        以索引编号为参数，返回这个位置的字符  
charCodeAt()    返回某个索引处字符的unicode值(字符编码)
静态方法：
string.fromCharCode()     静态方法，所以需要加上string对象，根据指定的unicode编码中的序号值返回一个字符串，和charCodeAt()方法相反 
string.fromCharCode(104,101,108,108,111)    //'hello'


toString()          把任意数据类型转化为字符串  toString()和string()等效，都是将对象转化为字符串
indexOf()           在字符串中查找一个或一组字符，返回首次出现的索引编号 ,大小写敏感，如果没有该字符返回-1 ,利用该值可用于数组去重  str.indexOf(xx)
                    接收2个参数，要查找的项和查找起始位置的索引(可选)
                    
lastIndexOf()           在字符串中查找一个或一组字符，返回最后出现的索引编号,没有返回-1
substring(start,end)    返回两个索引编号之间的字符，包含首索引编号位置的字符，不包含第二个索引编号位置的字符
slice(start,end)        等效于substring(),可以设负数，反向截取，可以只设1个参数，表示提取该参数开始剩下的部分
split()             当指定一个字符时，它用查找到的每个此字符将字符串分割，然后储存在一个数组中，简单说就是用字符串里的某个字符（空格，逗号等）把字符串分割成数组
trim()              删除字符串开始和结尾的空格
replace()           有些像查找和替换，有一个需要查找的值和一个用于替换的值，只替换第一个查找到的项
                    replace(/xx/g,'yy')  入参是一个正则，实现全局替换
                    第二个参数也可以是一个函数，会传递3个参数给该函数:匹配项，匹配项在字符串中的位置，原始的字符串
                    text.replace(/xxx/g,function(match,position,originalText){

                    })
valueOf()           返回字符串对象原始值
match()             在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。
                    该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。
                    不匹配会返回null
                    str.match()   //返回具体值或null


数字对象number       //所有数字变量都能使用该对象的方法
全局方法Number()      把变量转换成数值
方法：
isNaN(x)            检查值是否为数字  isNaN('hello') 返回true    isNaN(-1.23) 返回false
toFixed()           按小数的个数四舍五入（返回一个字符串）
toPrecision()       按数字的个数四舍五入（返回一个字符串）
toExponential()     以字符串的形式返回指数计数法表示的数字
valueOf()           返回number对象的基本数字值
toString()          以字符串返回数值


数学对象Math  //'M'大写
属性：
PI    Math.PI   返回pi(约是3.1415926)
方法:
Math.round()    将数字四舍五入到最近的整数
Math.sqrt()     返回平方根 例如Math.sqrt(9) 返回3
Math.ceil()     将小数舍去到最近并大于它本身的整数  //只要有小数就大一位
Math.floor()    将小数舍去到最近并小于它本身的整数  //直接舍弃小数
Math.random()   获取一个从0（包括）到1（不包括）的随机数
Math.min()      集合中的最小值
Math.max()      集合中的最大值

0~99随机数：
Math.floor(Math.random()*100)
0~100随机数：
Math.floor(Math.random()*101)
1~100随机数:
Math.floor((Math.random()*100))+1

万能公式取(min~max)(不包括)之间随机数 
function rand(min,max){
    return Math.floor(Math.random()*(max-min))+min;
}
万能公式取(min~max)(包括)之间随机数 
Math.floor(Math.random()*(max-min+1))+min



Date对象和Time对象
var today = new Date()      //创建Date对象实例，若未指定参数则默认为当前浏览器日期和时间
            new Date(2020,0,1)  //设置日期：2020,1,1日
JavaScript下，new Date([params]),参数传递有以下五种方式：
1、new Date("month dd,yyyy hh:mm:ss"); 
2、new Date("month dd,yyyy"); 
3、new Date(yyyy,mth,dd,hh,mm,ss); 注意：这种方式下，必须传递整型；
4、new Date(yyyy,mth,dd); 
5、new Date(ms); 注意：ms:是需要创建的时间和 GMT时间1970年1月1日之间相差的毫秒数；
方法：
getDate()       setDate()           返回/设置月份中的日期（1-31）
getDay()                            返回星期几（0-6） sunday开始，saturday结束
getFullYear()   setFullYear()       返回/设置年份（四位数）
getHours()      setHours()          返回/设置小时（0-23）
getMilliseconds() setMilliseconds() 返回/设置毫秒（0-999）
getMinutes()    setMinutes()        返回/设置分钟（0-59）
getSeconds()    setSeconds()        返回/设置秒（0-59）
getMonth()      setMonth()          返回/设置月份（0-11）
getTime()       setTime()           返回/设置从1970.1.1开始的毫秒数 (即返回时间戳)
getTimezoneOffset()         按分钟为本地时间返回时区偏差值
toDateString()          返回适合人类阅读的:星期，日，月，年  (不能对时间戳使用,只能对new Date对象使用)
toTimeString()          返回适合人类阅读的:时，分，秒      (不能对时间戳使用,只能对new Date对象使用)
toLocaleString()        返回浏览器本地时间
toGMTString()           返回GMT时间
toString()              返回带有时区信息的时间

JS获取当前时间戳的方法-JavaScript 获取当前毫秒时间戳有以下三种方法：  

var timestamp =Date.parse(new Date());    结果：1280977330000       //不推荐; 毫秒改成了000显示  

var timestamp =(new Date()).valueOf();       结果：1280977330748       //推荐;   

var timestamp=new Date().getTime();         结果：1280977330748        //推荐;   

js中单独调用new Date();  显示这种格式  Mar 31 10:10:43 UTC+0800 2012  

但是用new Date() 参与计算会自动转换为从1970.1.1开始的毫秒数  

