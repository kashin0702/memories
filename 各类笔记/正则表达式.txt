正则表达式的概念类似于文本编辑器中查找和替换
语法1：
var re=/pattern/modefier
语法2：
var reg = new RegExp('pattern')

pattern是标准的正则表达式模式

modefier取值： 
修饰符 
i       匹配时不区分大小写
g       全局匹配
m       多行匹配，而不是到第一个回车处停止


正则表达式通配符
.       任何单个字符（除了换行符，行结束符）
[]      包含在中括号内的单个字符,  也就是匹配[]括号其中的任意一个都可以
[^]     没有被包含在中括号内的单个字符, 匹配[]之外的任意一个字符  
^       任何一行的开始位置
$       任何一行的结束位置
()      子表达式（或捕获数组）  匹配多个
(red|green|blue)  查找任意一个指定项
\n      第n个标记的子表达式（n等于数字1-9）
\d      任意一个数字   
\D      非数字字符
\s      空格字符
\S      非空格字符
\w      任意字母或数字字符(a-z,A-Z,0-9,'_')
\W      非字母或数字字符（不包括_）
\b      单词边界   例子：/\bA/   A开头  /A\b/   A结尾 
\B      非单词边界


[a-z]  匹配a-z之间任意一个字母
[^a-f0-3] 匹配a-f,0-3之外的任意一个字符


正则表达式量词
^n      匹配开头为n的字符串
n$      匹配结束为n的字符串
n+      前面的元素至少出现1次，相当于{1,}   a+b 可匹配 a,ab,aaab
n*      前面的元素出现0次或任意次，相当于{0,}  \^*b 可匹配b, ^^^b   
n?      前面的元素出现0次或1次，相当于{0,1}     a[cd]? 可匹配a,ac, ad
{m,n}  前面的元素至少重复m次，至多重复n次    ba{1,3}可匹配 ba baa baaa
{n}    前面的元素重复n次， \w{2}=\w\w    a{5}=aaaaa
{n,}   前面的元素至少重复n次，\w\d{2,} 可匹配a12,456,M12344





^aaa 匹配 xxx aaa xxx 返回false, 匹配aaa xxx返回true  只能匹配开始的位置
aaa$ 匹配 xxx aaa xxx 返回false,匹配xxx aaa 返回true,只能匹配结束的位置


常见正则表达式
/^\d+$/         数字
^[\s]+          以空格开始的行
/[^@]+@[^@]+\.(com|org|net)$/   email
/^#[a-fA-F0-9]{6}$/     16进制颜色值
/^(\d{2}\/\d{2}\/\d{4})|(\d{4}-\d{2}-\d{2})$/

/^[a-zA-Z0-9]{6,12}$/  用户名
/^[a-zA-Z]{6}$/        密码

方法：
.exec()    捕获方法    接受字符串参数，返回一个array数组，且拥有index,input 2个属性
index表示匹配项在字符串中位置,input表示应用正则表达式的字符串
var text='mom and dad and baby';
var pattern=/mom(and dad(and baby)?)?/gi;    //包含2个捕获数组 'and baby'  'and dad and baby'
var matches=pattern.exec(text);
matches.index    //0             
matches.input    //mom and dad and baby
matches[0]       //mom and dad and baby
matches[1]       //and dad and baby
matches[2]       //and baby

.exec()和字符串的match()方法效果一样,语法反一下
var match=string.match(pattern)


.test()方法，用来检查传入的字符串中是否能找到匹配正则表达式的数据，返回布尔值
.test()  返回布尔值
